---
title: "Decision Boundary App with Shiny for Python"
author: Dr. Chelsea Parlett-Pelleriti
format:
    html:
        toc: true
        number-sections: false
        colorlinks: true

jupyter: python3
---

# Introduction

Today we're going to use a package called **Shiny for Python** which allows us to build beautiful, interactive web applications using python! Shiny for Python is a great way to present your Machine Learning Analyses to others, especially people without python skills, because it allows them to change outputs and interact with your results without writing any python code. It's also great for building quick and easy Dashboads.

Check out [this app I wrote](https://shinylive.io/py/examples/#regularization) that's featured on the **Shiny for Python** front page. Or this [wordle clone](https://shinylive.io/py/examples/#wordle).

# How Shiny for Python Works

Shiny for Python is **reactive**. In this context, that means that Shiny for Python keeps track of all the parts of your app, and only re-renders parts that need to change when a user changes their input. Shiny does this by building a **computational graph** that shows how all the parts of your app connect. Any node that's *down stream* of a users change will be updated, but the app will not re-render things that are unaffected by the change. This is unlike frameworks like Streamlit which by default re-run apps top to bottom every time users change an input.

![An Example of a Computational Graph](/Users/cparlett/Desktop/PositConfTalk.png)

The nice thing about Shiny for Python, is that you don't have to build that **computational graph** yourself, Shiny for Python infers it based on the structure of your app. So you get the power of reactivity without the stress of managing it yourself.

# Parts of a Shiny App

Shiny Apps have two major parts: the **UI** (which determines how the app should look) and the **server** (which determines how the app should behave).

### UI
First, let's start with a [basic skeleton for a Shiny App](https://shinylive.io/py/editor/#code=). The app has both a UI component (stored in `app_ui`) which is using `page_fluid` to create a basic container for our UI. The UI object tells the app what it's basic structure should be. For example, our app has a level 1 Header (`ui.h1()`), an slider bar (`ui.input_slider()`), a button (`ui.input_action_button()`), and a plot (`ui.output_plot()`). 

Parts of our app that are *inputs* a user can change have the prefix `input_` and parts of our app that might rely on these inputs have the prefix `output_`.

### Server
Then it has a `server` function, which is going to tell Shiny how to dynamically update. This is where we'll define any part of our app that might change based on user input. The server helps us define the *computational graph* for our app, which will allow shiny to know what parts of the app need to be updated when user input changes.

For each *output* we define a function that tells Shiny for Python how to create that output.

```{python fullapp}
#| eval: false
# Import Shiny for Python submodules
from shiny import App, render, ui, reactive
from pathlib import Path

# Import modules for plot rendering
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Import modeling packages
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler

from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_transformer

    
app_ui = ui.page_fluid(
    ui.h1(),
    ui.input_slider(),
    ui.input_action_button(),
    ui.output_plot(),
)

def server(input, output, session):
        @output
        @render.plot()
        @reactive.event(input.go)
        
        def plot_knn():
          pass
        


app = App(app_ui, server, debug=True)

```

# Building our App
## UI
Let's start by building the UI. Let's comment out all our empty UI functions and add them one by one. 

### H1
First, let's give our app a Title. We can do that by adding a string to the `ui.h1()` function.

```{python title}
#| eval: false
  
app_ui = ui.page_fluid(
    ui.h1("KNN Decision Boundary Plot"),
    # ui.input_slider(),
    # ui.input_action_button(),
    # ui.output_plot(),
)

```

### Slider
Next, we can create a slider bar. A slider bar allows the user to choose a numeric value by sliding their mouse across the bar to their desired point. Slider bars need a few arguments. 

#### id
First they need an internal id. This is the name we'll use to access the current value of the slider. We'll set this to be `nneighbors`. 

#### label
Next, we'll need a title that explains to the user what the slider controls. We'll set ours to be `"Number of Neighbors"`.

#### min, max and value

The last 3 arguments tell us the upper and lower bounds of the scale (we only let people select numbers between `1` and `100`) and the default value for the slider (`10`).

```{python slider}
#| eval: false
  
app_ui = ui.page_fluid(
    ui.h1("KNN Decision Boundary Plot"),
    ui.input_slider("nneighbors", # internal name for this input
                    "Number of Neighbors", # title of input to display
                    min = 1, # minimum number
                    max = 100, # maximum number
                    value = 10 # default number
                    ),
    # ui.input_action_button(),
    # ui.output_plot(),
)

```

### Output Plot
We're going to skip `input_action_button()` for now, and go straight to `output_plot()`. This function tells Shiny that there should be a plot here. But all we need for now is an id for the plot so we can reference it later. We'll call ours `plot_knn()`.

```{python plot}
#| eval: false
  
app_ui = ui.page_fluid(
    ui.h1("KNN Decision Boundary Plot"),
    ui.input_slider("nneighbors", # internal name for this input
                    "Number of Neighbors", # title of input to display
                    min = 1, # minimum number
                    max = 100, # maximum number
                    value = 10 # default number
                    ),
    # ui.input_action_button(),
    ui.output_plot("plot_knn"),
)

```

## Server
Now that we have the bare bones of an app's UI. Let's tell Shiny how to render our plot for us. Right now, it knows there should be a plot here...but it doesnt know what should be in the plot. We'll move to the server function to change that!

The server function in general tells Shiny how the app should flow, and how different inputs should be used to create outputs. We only have one output, our plot, so we'll start by creating a function that defines how to build that plot. 

To do so, we'll replace the `pass` keyword with a function that builds a knn model and uses `plotDecisionBoundary()` to create a graph of the model's decision boundary. Notice our function `plot_knn()` has the same name as the `id` for our `ui.output_plot()` above!

```{python server}
#| eval: false
def server(input, output, session):
        @output
        @render.plot()
        # @reactive.event(input.go)
        def plot_knn():
            pass

```

First, let's build and fit a model. To do so we need to:

- Load in the data using `pd.read_csv()`
- Create our `X` and `y`
- Create a Pipeline with z-scoring and KNN steps
- Fit the model (we'll skip Model Validation for now)

```{python server}
#| eval: false
def server(input, output, session):
        @output
        @render.plot()
        # @reactive.event(input.go)
        def plot_knn():
          
            # load in data
            infile = Path(__file__).parent / "penguins.csv"
            df = pd.read_csv(infile)
            df = df[["bill_length_mm", "bill_depth_mm", "species"]]
            
            # drop missing values
            df.dropna(inplace = True)
            
            # set X and y
            X = df[["bill_length_mm", "bill_depth_mm"]]
            y = df["species"]
            
            # make empty model
            z = make_column_transformer((StandardScaler(), ["bill_length_mm", "bill_depth_mm"]))
            knn = KNeighborsClassifier(n_neighbors = input.nneighbors())
            pipe = Pipeline([("z",z),("model", knn)])

            # fit model
            pipe.fit(X,y)

```

Next we'll use the `plotDecisionBoundary()` function that I created and loaded to plot the model's decision boundary, and return that plot. Returning the plot is important because whatever `plot_knn()` returns, is what will be displayed.

Notice that we set `n_neighbors = input.nneighbors()`. This tells Shiny to use the user's slider input (with id `nneighbors`) to determine the number of neighbors in our KNN model. This also tells Shiny that any time the slider value changes, so should our plot!

```{python db}
#| eval: false
def server(input, output, session):
        @output
        @render.plot()
        # @reactive.event(input.go)
        def plot_knn():
          
            # load in data
            infile = Path(__file__).parent / "penguins.csv"
            df = pd.read_csv(infile)
            df = df[["bill_length_mm", "bill_depth_mm", "species"]]
            
            # drop missing values
            df.dropna(inplace = True)
            
            # set X and y
            X = df[["bill_length_mm", "bill_depth_mm"]]
            y = df["species"]
            
            # make empty model
            z = make_column_transformer((StandardScaler(), ["bill_length_mm", "bill_depth_mm"]))
            knn = KNeighborsClassifier(n_neighbors = input.nneighbors())
            pipe = Pipeline([("z",z),("model", knn)])

            # fit model
            pipe.fit(X,y)
            
            # plot decision boundary
            f = plotDecisionBoundary(X,y, pipe, "KNN")
            return(f)

```

### Decorators

You might notice that we have some weird lines `@output` and `@render.plot()`. These help communicate to Shiny what our `plot_knn()` function is doing. Specifically that it is creating an output, and it's going to be a plot.

## Optimize our App

Now that we have our UI (how the app should look) and our Server (how the app should behave), we can run our app! But it's pretty basic, so let's do *two* optimizations. 

### Slider Reload

Because our plot, `plot_knn`, relies on the users slider value to render, it's reloaded every time the slider changes! That's pretty annoying. So let's add a button that we can press to re-render the plot. Once we add it, the plot will *only* re-render once the button is pressed, not every time the slider value changes.

To do this, we first need to add the button to our UI. We'll do that using `ui.input_action_button()`. Like our slider, the first two arguments are an internal id that allows us to reference the button state (whether it's been pressed), and a label that tells the user what the button does. So let's add those her. 

```{python button}
#| eval: false
  
app_ui = ui.page_fluid(
    ui.h1("KNN Decision Boundary Plot"),
    ui.input_slider("nneighbors", # internal name for this input
                    "Number of Neighbors", # title of input to display
                    min = 1, # minimum number
                    max = 100, # maximum number
                    value = 10 # default number
                    ),
    ui.input_action_button("go", "Create Decision Boundary"),
    ui.output_plot("plot_knn"),
)

```

Now that we have the button, we'll add a new decorator to our `plot_knn()` function that tells shiny to *only* run the function if the button has been pressed. We'll do that with a `@reactive.event()` decorator, and give it the argument `input.go` to tell it to wait for the button to run.

```{python db}
#| eval: false
def server(input, output, session):
        @output
        @render.plot()
        @reactive.event(input.go)
        def plot_knn():
          
            # load in data
            infile = Path(__file__).parent / "penguins.csv"
            df = pd.read_csv(infile)
            df = df[["bill_length_mm", "bill_depth_mm", "species"]]
            
            # drop missing values
            df.dropna(inplace = True)
            
            # set X and y
            X = df[["bill_length_mm", "bill_depth_mm"]]
            y = df["species"]
            
            # make empty model
            z = make_column_transformer((StandardScaler(), ["bill_length_mm", "bill_depth_mm"]))
            knn = KNeighborsClassifier(n_neighbors = input.nneighbors())
            pipe = Pipeline([("z",z),("model", knn)])

            # fit model
            pipe.fit(X,y)
            
            # plot decision boundary
            f = plotDecisionBoundary(X,y, pipe, "KNN")
            return(f)

```

Amazing! Now our plot only re-renders when we press the button!

### Loading in the Data
Right now, our `plot_knn()` function loads in the data every time the plot re-loads, which is unnecessary! We only need to load the data once. So let's move the data loading code up to the top of our file, outside the UI and Server functions.

```{python full}
#| eval: false
# Import Shiny for Python submodules
from shiny import App, render, ui, reactive
from pathlib import Path

# Import decision boundary function
from db import plotDecisionBoundary

# Import modules for plot rendering
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Import modeling packages
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler

from sklearn.pipeline import Pipeline
from sklearn.compose import make_column_transformer

# load in data
infile = Path(__file__).parent / "penguins.csv"
df = pd.read_csv(infile)
df = df[["bill_length_mm", "bill_depth_mm", "species"]]

# drop missing values
df.dropna(inplace = True)

# set X and y
X = df[["bill_length_mm", "bill_depth_mm"]]
y = df["species"]

app_ui = ui.page_fluid(
    ui.h1("KNN Decision Boundary Plot"),
    ui.input_slider("nneighbors", # internal name for this input
                    "Number of Neighbors", # title of input to display
                    min = 1, # minimum number
                    max = 100, # maximum number
                    value = 10 # default number
                   ),
    ui.input_action_button("go", "Create Decision Boundary"),
    ui.output_plot("plot_knn"),
)



def server(input, output, session):
        @output
        @render.plot()
        @reactive.event(input.go)
        def plot_knn():
            # make empty model
            z = make_column_transformer((StandardScaler(), ["bill_length_mm", "bill_depth_mm"]))
            knn = KNeighborsClassifier(n_neighbors = input.nneighbors())
            pipe = Pipeline([("z",z),("model", knn)])

            # fit model
            pipe.fit(X,y)

            # plot decision boundary
            f = plotDecisionBoundary(X,y, pipe, "KNN")
            return(f)
        


app = App(app_ui, server, debug=True)

```

And our app is now complete! Play around and see how changing the number of neighbors affects our decision boundary!

[Full App Code Here](https://shinylive.io/py/app/#code=NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAYgAIBJGVYgJzLoGUALASwmx0AZmzoAFbGW6k6AZwCuAIxjEAJvIA2cWQB0IQ1sRhy+Aur2ZsOAQXR46rSqrit783vcdRCZXgDc4PQMjOlQoKQ1eRXNLdnFw7j09eiYWOOdCXlleGUVieQhVKFZBIQKfHIggw2NVaIs0jlQNYjIAEThM7NIAIXzC4uwkiBTYjhV1LVlhUWbWhycXfgBzPQarOgh5ZkEoaYhUNbG6GHC5skjFLGxzuj3QjTIjxrk4KDzWCDvp2QhdCHWcTCA2m91QqmGoxeEzgkQgy1C3gA1lBltpqiFZEitMUIBhoP44AB9RRQbDaGIvADiUHksmyUAgADkehjjFicZ8MGRHHBKRsOl1KgAVXkAYQ0e2yQl4LjZcmxby5cKVRJhGn5cQAMsRlllfIQAEpwZaOemVeUcpV4iBwXjLbgfaaAjgAaSZdodTolUt4Mrl+hqCs5eNQjjDxEI2my8M1HE4ZEZRVYqk4hCgWlYw2C7MVuKwvFQsP4fJd4kLxdtlrzXJIllkpeOpyRxJIGm2ECJPMZshErHgWaqIzoLSgqnMXyKibW+l4WjoAF54lIABREokyrTrgCUWGKlA4AHo6DowEX4e4-hhCLI-Ke9KohIvQqoMF5VESb34V-xN3Btw+T5Lo+wDAKeihzhoRJaPCUhqjAp72OBkFEs4qBwTACH4CeYCyEWmTomAAC6RGQnQqiGKgJxZDGCJ+Bm8jooUQgYBRxCoNAP4HJKUbPqKjEAUO9ANhwAAadyFHQQwQOJwFCKByEaFBMHLBhWFIWAEFKahcDodw8GniReiCHJYG4fhsq6MRwxoKgRLuM+7h7miG7trwqgrnodDeXQTncAAjJ5YDukydCClklR0H0BTJoIYgtE8YDbngXk+U5-CoPIZBErIkTOKwQUQLa9qOmwVn2PQ-AUJ8GabLAfJ9nQUhZBOmVPF8PmdV13U4Uy2yKC4dDEE+HolU6iF0PQvgXHyw2tVlTXEORWTNGSqU9RtPkwPwz7+RV1EAjA2ybP1AabedJxQAAHrtAAMt37acV0WMdWwwANg4XZt9HtnyS7+bdk3kXAQi0o8J3vWdX3dcl62+bwGAZVlRLeL4pAkllZCkEFyzEBNp5il4FBhZ0EUyNFAwlKesMdd5Tn5GQbVEucQXnESSJFdTKUQIJwwPiDrysAEBVI2Q9gM219gNuapDbogcOdQAAhLWUKz5iuOIULhYAlK6CRtGtvBUAQYHAATkFxbUYLj+s9c4T5sxzEB6-LtObfQzZ8nAzBkII6pq91ABez6e5+xDtjAnbdn8fYDiuK4JkmxSpummZ6-YZlacplCqfpmH45pKFoWphnbrb51O8+7qeqVrCyD65r+gVnbFV6ZXPqL+Kt7Xsh6+Xm2oBWz5iBWKorsAQWB4hgfJUF-vYU725EbzbsbfQMrjGosIB11g9FhgG8rqJeDYCvX30LcGRk18eQxYMO+dUBDytOF3QQBTsVHyf9h73AGkhdTB+PlHBkHkJ8FcQh+6dT5tAdAz5bCoBXLZeyHhBbC3sM4RQ8hlgLn4v+MAABfPA4BoDwGoHUa4+AiCkAoFQZAUINgTE0BSRqtxNb5RWM8DYb0cDfE2IcQ60IzgJUuNcW4YJHhcLiA2d4bAvj3F+P8MswIiigmmOCMiqRGFbzhAiMIhAURon+DmYM1p8RQEJCSMkFIyw0jpAyZkrJAyYhrHiHkcBGwvFfiKcUkpG6ykHCYq0+YVTFDVDouMdAdR6lkAaY0ppowWmcbmEM+Ia5OkidXMaZUG7SgCdWVJYZdKGCjOaWMZZE6UxThmAMBSzG-xVJEkeRYVR1PzHWFgDZImhzbB2LsrAeyxwDPbZ+7RSZvw-oMI+U4T4zJOGoew6ouw3H-K7OG9A6wQVtHQcSSYpLkXCFAOGokTIvmvKQdMZBx6iRmdgKcRF7DXRav9M+Pl6CmneA4RkaIhpPh+oxaYrCEpwyurdIkAz4R-X4RgOEeFvBwBXNtZ2NzwiIxaIQYAiA8C3WXnQAAtHQAArNzaGpKnrTNRXOSMmLsW4oANREvsG9O6t1+5XX8uC75UKDgwv4HCqMiL+AUrIGi6lWL-K4oJcSoBpKtrXWFaKjF4r6WMohiy-u6y6Bog4BmDUnTsiKHnCwKq0wZAfNQIkN2oLnw8vDG8K5oLOWQrwADe6bL-I2swL4LQK52VOrRC6+6rKQVElNO5Z84IMBtEOQAMQGfAFcIAUUit6ZHWQwAcWIDoKC+wybzkRz+MACVWb2UENed5C+jhVC8B8HcJSdBSQGNNP0ccxryD-E6lRJcEwsBVprQ60NrB3JssHe5MyhxiIRuGJ1C+wK3YymWI8m6S5mgioUIoc4vdy1SWmEuHlBReAAEdGIrjueEbcJ4hwzteBwNsswalkAoHDO9ddnxmRoAAJgAGwABYv2EoAMwF0-VAAAnKoAAHEIYDcBQOED-Uc6ybswhaEfVCkA2B028CIlml9WGiIzFYOYCcXzIUrhgqe2QZcCHTreQ29wGhW1zs6o+kOOjllFjoAy08JMhTkxbffMAcNb6SSXIojAshLnVRZsunZU580dnTTi+wpy82psLRKklsqvrcEYs+U8E6l3Pmuhgw5z4rqjtUI8jQFqoDPluhgPaMrtO7tVVoNEom6AxozA2H+D7iYrv8-+YTLbnzick+EaTutZNqfDopjNDz9lLliwW9NmnnPad01Cs9Ys7iyZMwcxMz4Tl+dQwFxEZXgtuxE6+ESK5prziXI+-uNWYUmicORyMC4ADkUZyCDS0EIMg3X7CKDyBZrGKMICEGkKwBcK49p0Ac4SsucNaPeRAWA52C7tyEOIZAeq1BzzLEvLIa8t4qEkH63Q-AeFSbaDwFkSUhQ8BZ2gjnNSr2i66U+0ISI6AXDvdgnnGAr21DYDVFKUNeAGxXRPkqPQD1rDOEiH-YUbA0R10oHgADoHHMuogxgAA7AT-yGAHoAaJ4ShzD1ThaDwB++6RO9B7WR8WNHGOXANggDjvHxL-JE4wD+gnX7yc44g-dMXQhvY1IZ0zvQH68Bs9R3gdHrBMfc7wD+hzAGCdi-8qBwlYuAMfup1LmX9PGe3WZxAXXyvZSq851jnneBXeu6tzb4X9uOfq659jgDouScG4wLrg3AHjc-rNw9aXdO-4e70MS73jvffO95yHuXGAv0utAzTnH-7c+x7l9bvQWek9q41-7wnoGXWC4g6T43X7Tfm8L-HiAJOy9O817jjAivg9Z4N0bh6f6qdi5b-LiAdeO8p67z+-H-lCd7TDxHkfD0i82+r1PivPOf0frF4znv2fc876j+78fAMlco4d+Xv3PPKcYDrwLufEHRcU4A5L1frf-Ks8vz7rfOPa817p7z656U7v6n7F4QD+SK6b435a5k6L6C794Qa74U5W7N6y6f524-7J5-4AaE5Z4fpk696gZk4U4S4F4YFn5e7YHX6p4Aaz4EHwHZ6E5D7a4UGW5n6J40Gd7+6i794AHz6D7-5gEx6UEQH+Sl7cHT6V7E7Z766G4R4n6iEcHiHt5SF-474YDEr75B6gaC5D7U7sFx5n6T7qGwH0FC567C7z6z6v5N7R4W7GHiEb5mGp5-p75k786ga2Fa5oG05iE26M4X7s54A9BZAkB-x34P6E6h5E4+H0EiGOFr4K7f4hFhGSbECRGC5B6E45EgFfpgFj4QEfrQHYHpERE45G7V7B694QZ45kGJFFGBFYFpHhGZHi4H7z5P5CG44n5NEK7UGtEZGRGE4P6C61EgHkGj4BEK5cFDEVEAZG6h5V4E76Hi6NEzEQDfrBEq7lHtHa6Z565IHh4U6Ep9GbEfpqHzH7HLaAHVEQZrEm4bEqGBGmHXFZEYD3GHEC4oE47+RKFJGt4fouHvFa63FdH3EgGG5GHJG25I7YFtBeCg7d786B414sE46m657KFOE24AapEq6IlvDInjF64IEYm46FGbEm47EO5EmwBp784CEQYUlv7YmAnj4AYtGElIlgmfF673HxE54wmt70G0l-z0nImi7WFrED7G4m5CE4mwmLHil4CSlp6K6EFz6gYv5wHnEvF6AB6qnql4H34Z4PQG5Qn6m4mGlXE8nEm+GdGE784S7G5nHsn9G25vH2kMl379547LGkE45snoEGm24gk+nIl44P546L4QY+F-rWmwna7Gm8kB5aF64WnIHG7-EembE-oEl0m8kHHRGWFykU7CnTFhk76pkOnplZkZnz66n4nPE2kQA-rclFkOk-qz6L5466G6k9lUnVmDGRn-766i73E9FBqhltmR61m+l45IFmmWli5-rDlzmSEhHqkFnan67ZkU7H5Vlzl2ldm+mC4un8kC71EM56FCHJnelnlSn66C7VE56KF5nVkRlPmOm65anEFBkFlJmt7U6ql7GRFLmAE5HNmGGzlF4QYJ6Fl-zgV8lxlXkslrkhn+EqEIUQCEqlGgmLEvlXnvmHkAlFG4WAZgVtF-yaEWl85F5rm3TAX3SUWjkO4oUWGXlxlrHAmtnwUJ5zG7E0VwFln4HZ5BmgEimsUJ5bnCXDFp4WkXki5unkViGUWnnIUiUHHLkxknHrHSW3SUWPlaUKXpmonfEQZBkfoQZqU4UJ7fmmULGIFyF9nxFU6GW4UFHUVmVG5B6TkE49G5lwVW5eVIWhHaVk5-lMHlla5sHHkCUQCN4+XOXfGym2UN78WhUl6dlOX7ExWE7EG-Ha4sVGUl7sV5WRHSmAFxk+E2V2VOFeVCUcWRWWXyG-G9GeUl5yUtW+WNmi7EE9GLGfmNUl6aURUKW7l9lP4YkFkbmJVfomU4HmFVEup8GH7G7MUjULWOXLVuFk4xllmgazWR5dVt7wkhG0Fd7h5eHyH5FZUyVt7hVXX+79lWEbUVnzXZVt4EUq4vW36QWP7EEwUNWJVE65V7Wa6R4rkrEG5rFAVnVxGqn-WVGNnKWrkU5E4PVlVt7NW-6wGaGlleFCHH6I09X41uEObVGi4xmSVY3bXfVE7jUo137EFiVClfWPVE5LUs0DVrVP6PHukhVc27Uo2aHTV9kk0znYWjUT4XV-U8G34MGAG1E3lPEM2PVWXI2K2OnVEuUG6Dn00JXfXIHa3SG35oldHRGPFTEOEUV6AQYQ0s1G7TXWGgb6U76c043xkLkklAECEkHymg0m141qnFlRUZ6h7eGqVnXP6+155AEMUY0GXG2a3jUmkBVdFIFq2wV23qUO1LUmkxFyGq3G7Qmp3e27VF3oUrmkV57Y24U57x1EU5F763QdVC1532UQAkHx1TVkly4k1YV4D2092-U-kWFKXdER4N16Du3N2A0L4qWsGlWN0VVh11l82P7LGPHD1KnfWG590OalnV6M6zXD2j06nN1L1Z0fXCEa0416FH1AHOnZ6DnDUV2N2F1pnh6L6i7kl76Vld2y2gZV3Fnh61GNmgbFWuqf0s73QpXtFEVT1vkdVE72F4D733SgbwPhUoW7kPT76EO3Qe3oNCFFE4OQHt2IMfH+X7n6Vv4r6YMcm3SUMAwQ2cUAFEN32k0V1sO3Tr2cM13+n6XAkYNYOsPwOh2cVvUQkE7xGd0j1iH8Pk0TULHiVA3Z5q0eXC2SNUPjWcWFXml32UmGX8NLWGNz7pWSUC6KksP8O7X4MQNyH0Xw1M3kPKMs7n5J6WN-1QMUnIF2MUNeN4PaVG4EE64SVrkFFmNePj2VVp5B7ZHZ4MN+HMPBOQH+QcPaW75s1eHw2XEeMqFsP+SCMiXd4ROyEG6SVAPpOeOZPSM5NVPF0G1MVMMZNf6qMs0aPpUYl8UP0lPM06135-ngmgPG7uN8NeM83DN+WAFZlq0f3ANF4lOi0639233z6LMYMdNBEwF0Fb2knz6PHBXLNW5sOEFm24HJPB4xkUm51KPFMs4lFXME0Oa96ylE7NmnW6MXNO3rNk7WGv2M4dUPFFNOEXPr3O2dGrVNmbXB3YPPOh1i0Ob+nyE3lsGxOQHbH7Nd6jGAH+mSWFO-PPNDPm2iWXlR1D1e0XMzPkvd5T19mSVbUkvYtrPks9lP4eFH7S2PMQss5v6vN0Gv2P5vkgEKmstZPPXrO-0l3Z6C00sCvxMb2+k0165eEMMPMSNsNcnN3o0ivjOsHtP1NZPr3V0IGWWPFHlnOIuQEqlJ47kxXo112mNTN2uqMmnhOAFeE2NMPasCvp3FnvMZ57RpO47GtPN2vf11mymi4uk9HxU2t6NZNgN1myOvkpNrlYluulPy0-kHEfPakMOJt1ORulPhU7mosq2rHL7gsrMs41kOtpm76L5G4ukUkstJtsMdnP1JN3UTM7Mms9l6tAFqsG4dW8v+uQHzlNtpv7nNM9H545t-oL1OnfF128My31vTuBub1tVAvxE-p+v2MNvRuqvEUxkJsIvJs-qpvnkw1FsTOlVsOgWzvnuMs1uY3Y0vsVvh2NnAu3SAW8sZMPRUgHjEDEBqP7H-0urOOEGAVassM257RgfkAQdQd-wn4SHp4fpv5i6EpG1btAl4CodYyQf4O5Euq9kM4Axrk-NJt4kkfgfkciVYdG6aldEPQEde2e5MdocseTX62z7aH-H4cluenEqkfof4NxuwcZmEFH6KMSM25Z5ScCcVHQ3WHK3wdrm22lttkk5qcYda6W1LE0c3n4U8cO18dkfGcdlAHh7C6M4YslvKdz02fSfaVjtG5OeidcenN8uwnn5Gf4NU1yck6EEJlLsMdeMefqf7E3nYehvYdceKOelQFxd2dtvhc0dRfXvIe64hfaWE5aeHGEH6WEq2WGXIfC5FeTVG4P7ae0dD5pNueQGSfMd2cBkupzOEFrGVelXIeqedf4O-FZPyfNd6kP3IeGcjfaV4697scM5akPRfoX2bHz6ZcyedHCdy4Yt6dtcG5bfFdVMu3Le-GAaDcK6gdzcKVm696z7RUYncfVcpHHf1dz67eEFCGGHTcK6K51caeyelMTce2udIcK6Fe3dA9AENc0c-eduBdAm1fQ-7G77VGyvff4eTsQ9bEdf8d2cweifJc-ewNEfj7bGA-7G7cg-RWDlk-gGBGzcE-4MCFCFY9cfRdI8U915U+0VGO080dH4xO6OBHV5894Bsc4fcNnFXdwnvcaeC6h5mclEXfZvk8QH4kK9o8rmz6amsNrmEf6fKkA+o+0Vncg-aHW7Y-5eGlQ8s+seA28V4ereI+elikS+3ufdmklG56EoBcSO4Uqme8lf81-ky-if5227DcO+TW7797h4RfjdD7l1JtB-M+2f4Oz4yk4fB5cfq-c8414Ha+0U+HjcRPn3XtB-i9m9a6UeicRdGX4dLOF+4Upme+75B6J9y4Ump-G-fUFkl9a6A26klE-dG+j01me9mfjdJ9H570sNt-2+Z-zffHs8pda46Ma9t8o+x8VFm786rWq-4dpdR-zme-h4J-8l9drm1OB96ArvT+Nnh6n2Tee0P1t8Z+ed3fglH8YOEqR9u6P6XnrX05YY9c+FXBnvf3bI189++xJbqJzrwc9Je63buqBU97rUQeHHI-FV10aUUUOoAkVtR197N8valFU3nAPN7e9fOR+cHqPSooS8zcrbPfP-2A5R8ABQ-dwvzmz40d4ad-RfoJU4FCFROTnGXm73YEx8V+k1cPA-hf499MKs9PCl-3i5UDD+LAv3mwLQEgDKBWuZxpb3kEr0P+DlIfmbmsIq8P0PhWXmdW8pP9Q8Mggwb4UUFfoCBOg9wg92v4rcUBZAkvBQKkEac5m43V-gmToFR81uJgx7j11kK4cgyhKLnqPV-RCDdeB+QghiyN7QD-0nA6MvzSQEu9JeE-UIZIO-4w93BvnPLrngWrKCuu-VZIcCXw56d4h2gvwfsRupUcahR+NIQIKSqwCmhmHBzEHnZ64cT+q9PQFjU4E3N1+htKviMJcE9CTOZZL1iURiGaDZa6DTgQLwWGeD-e3gtvMvyKHQdGys+JAY-nz6KCkaGA+YR4UNqnD8esw4Ad8VH65DKu2wr5mMIOHJCDeQ+EXmnxGGVCUK-vOfKLnD654YmiNRoXsKoG957ByAo9lMLbzdDwRWuBAdVRKIVc++o9CXJkO94idiqjeIJvUy1qMDd8agggpsPo6F9KGptT3oLlK6MFiqZDVlo7RMG55ROp9Cwc32fYO1d+tw2fOAKOF0jr2FIm4QiLNxjFpez3L4eSIdqFCVBugssjwMIKzUJRU7B4iYIjpYCaOz3VAfywnxgiZRR7N4YQygK6dj2GTOoiYJbbzMGcjw0-pGybpUjGy6-Wan3yna91CRnRQXKGxspidFWY9RIdwIm78iBmc9XYXqKTowcSilguIfU28KcCaes+JPgmVwFds56QomUSKMiERdv0+HNJhkyvqe88cZgn3hv1vaDtbRvwrzleW04lFjReI20bqLs6h8QeTnEhtE3EYnse68ItMTFVk5j9sxHIqhjd1cEit1++3AUbgxMGwteKXoznj6IBi+CER+oxbhNxJp3lJWJDTEcwMIbTjJeDzDpgI1eF2CixhtDBtuwBipjCeK5cMX5x3Gzjbo0ouzmTiDzxihehvb9vA3LF3dHOkQo4RZ13EmsjKnA8PKHjqpN8DCJo-8Z2IbFz4zuznE-rOOC618D+kQjjrqV+6Ssv8mIh-H-ws5oiTWGXC-g6OSHJ8TOY4zJiGOM7-CLKf5a0fBK5ELit6xA44boPAllt-iE4gEXvkeFJjJRmTe8Vn0IlJ94aYLMXKeIFxrDLxNQ34iCJzabd7RkIqISDxT5tiOmR3CXm7nAIXNBxtwsdhEOhHcSp2UBGYcKIcyFjMxF3LfjxKgLzi9RCAw4TRzV5vjsW5E-Bnjmpr45yu3orFg9DFCmBYkAyVACq1BxcC7i2eDutjWQ54AfJfKbsAFPVJYck6OpMulZy2KRTfJMUwKZLzVELdM2FOKMWGV1xRS-g6Uncj5z1w5F7myk-MqlOin+SMp+FKplkLhoDs62IFaqUVNqklT3RtdXvrbySptS-JaADKe4TQofMKSBfNriTkKkDTYpvJf4csU6J6En2r3CfP1OKnFldScjWKgjVF7ucppa0h0nNLkJvkKS+QsMufj2kdT1paVWugwwO648MJF0waXFMfGR1s87lCNm2Qy6PSZp3ZT5i-R6IdD0uBUtKZdIOljcl6jOIDnL1KarTQZDJaGnrW1IgECOtYz6cSm+l1SxmZXQDkxWhlZ4MZcUyJtwyamv5kpYkgmbNIxKP5oidNcKSzjrwUzuy1VTZi6zJGHdq8jM+GdlK6KDU6OyUoIpzKCm74c+gZTKn9y2J7RBZdfNGlA0kqAC2yLzKWfZ17yYCHigDOmVsWBk1Snps0qtsHjdq3T+ZwuJWZbQzaxUuSGs03LDJ1lgz5C8heGgF09LbEpZSEros2JAIhDu6lxa2T9K5lQM26kxbYTZR9lDTmZAdWmUYK2IcyQZNshkvVKQG55GcJNG0bLUFZKywu2HJAo8Va6dCteLsvXhngTmAUtRiVGkkrKJH80ciu9WEbqxdlBkracuD2gz1HpiklZsjDRgoVynbCVSSs9GmO0Na85FBRpXuW1SpbG59JucyaTHN9mg56pxDBSTgO7kMzp5ocq8pgOgZ75AZUfXHCHLiktDg8p9ZimuT-FADvJK8ncolwYoKcy6ww9spLPPlXTC2LpR4lz2gE1kXZGc2Mm-RjpwN2yWs9qbHKCnZcmJrTU4ooOHYfyryZsxKblJYnaj5ykComnLkApkiMmK7SBRazFYz0gx7ZKedrJnnD87ZtIhQVi2AG7zZpnhMqZ+0xL9jb25C7so1KV7MEG8cC7dqBSVk31mZA8rkpVMjb+96FccwFi42QU3ysW+FARUAqqZMKl8XcnBVRUgW6EohLYofOIL4XGyH53ZCudvWoVclSJZxCRZL1yZ64YyVrfsbEIMXQ0VZ67IlnorwUAKCFXvKOtf2UVgkzFy8-BZjLXYJzQWPowlNHI8WdS0WbtBRrwu1HeU65JFeTneNEVutnBFisdsDzqIN5SJyVJWQENlKdy88KS-+dNLqlw9bmcueGssO3YJClZ+8iGe3WwWssMhbctqsQQYaTMNelDL9PjI0Vxzj6wi6+UPmbn1Mv0di3JYTLXa6ETprC85oQiIhAA)


